# -*- coding: utf-8 -*-
"""Web Arena Underspecified prompts code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d4kqgQg8i0qrqORmYbrHXQAwbhZiUMWG
"""

#UNDERSPECIFY ONE ELEMENT OF THE TASK STEP 1
!pip install openai==0.28.0
!pip install pandas
!pip install datasets

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import openai
import os

# OpenAI API key
api_key = ""

# Generate underspecified prompts
def generate_underspecified_prompt(task):
    prompt = f"""
You are an expert at identifying the specificity of a task. Your role is to determine whether a task is already too underspecified or if can still be underspecified. If the task can be effectively underspecified so that the task still makes sense but not able to be completed correctly, you should respond 'yes'. If the task is already too simple and cannot be effectively underspecified, you should respond 'no'. Follow these examples closely: The task - 'rent a car in Brooklyn - Central, NY from April 9 to April 15.', response: 'yes'. The task - 'Sign up for the newsletter.', response: 'no'. The task - 'Edit my movie watchlist.', response: 'no'. The task - 'Book the cheapest long-term car rental with a fuel plan, GPS, and satellite radio from June 29 to July 28, pick up at 9 am at Orlando airport and dropping off at the same location.', response: 'yes'. Here is the task that needs to be classified: '{task}'. Respond with either only 'yes' or 'no'.
"""
    try:
        openai.api_key = api_key
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1
        )
        # Extract the classification from the response
        underspecified_classification = response.choices[0].message['content'].strip()
        return underspecified_classification
    except Exception as e:
        print(f"Error generating classification for '{task}': {e}")
        return None

# Load tasks from the CSV file
csv_file_path = '/content/drive/MyDrive/WebArena.csv'
tasks_df = pd.read_csv(csv_file_path)

# Initialize a dictionary to store original and underspecified prompts
tasks_dict = {}
task_count = 0

# Process the tasks from the CSV file
for task in tasks_df['Original Task']:
    if task not in tasks_dict:
        underspecified_prompt = generate_underspecified_prompt(task)
        if underspecified_prompt:
            tasks_dict[task] = underspecified_prompt
            task_count += 1
            print(f"Processed row {task_count}")
    if task_count >= 200:
        break

# Create a DataFrame from the tasks dictionary
underspecified_df = pd.DataFrame(list(tasks_dict.items()), columns=['Original Task', 'Underspecification_Possible'])

# Save the DataFrame to a new CSV file in Google Drive
output_csv_file = '/content/drive/My Drive/Underspecification_Possible.csv'
underspecified_df.to_csv(output_csv_file, index=False)

print(f"Underspecified classifications have been saved to {output_csv_file}")

import pandas as pd

# Load the existing CSV file
csv_file_path = '/content/drive/MyDrive/Underspecification_Possible.csv'
df = pd.read_csv(csv_file_path)

# Filter out rows where the 'Underspecification_Possible' column is 'no'
filtered_df = df[df['Underspecification_Possible'] != 'no']

# Save the filtered DataFrame to a new CSV file
output_csv_file_path = '/content/drive/MyDrive/Filtered_Underspecification_Possible.csv'
filtered_df.to_csv(output_csv_file_path, index=False)

print(f"Filtered DataFrame has been saved to {output_csv_file_path}")

from google.colab import drive
import openai
import pandas as pd
import os

# OpenAI API key
api_key = ""

# Generate underspecified prompts
def generate_underspecified_prompt(task):
    prompt = f"""
You are an expert at identifying important details in a sentence. Can you find all the important details in this given task and store it in a list: '{task}'. Respond with only a dictionary that stores these details in the format without any additional words. Follow these examples closely: original task - 'rent a car in Brooklyn - Central, NY from April 9 to April 15.', important details - {{
    "location": "Brooklyn - Central, NY",
    "dates": "April 9 to April 15"
}}. Original task - 'Buy a copy of the Gorillaz first studio album., important details - {{
    "band": "Gorillaz",
    "album": "first studio album"
}}. Here is the original task that needs to be underspecified: '{task}'.
"""
    try:
        openai.api_key = api_key
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1
        )
        # Extract the dictionary from the response
        underspecified_prompt = response.choices[0].message['content'].strip()
        # Remove any additional text and ensure it is a proper dictionary
        underspecified_prompt = underspecified_prompt.replace("python", "").replace("json", "").strip().strip('```').strip()
        return underspecified_prompt
    except Exception as e:
        print(f"Error generating underspecified prompt for '{task}': {e}")
        return None

# Load the existing CSV file
csv_file_path = '/content/drive/MyDrive/Filtered_Underspecification_Possible.csv'
tasks_df = pd.read_csv(csv_file_path)

# Dictionary to store the original tasks and their ground truth details
tasks_dict = {}
task_count = 0

# Process the tasks from the CSV file
for task in tasks_df['Original Task']:
    if task not in tasks_dict:
        underspecified_prompt = generate_underspecified_prompt(task)
        if underspecified_prompt:
            tasks_dict[task] = underspecified_prompt
            task_count += 1
            print(f"Processed row {task_count}")
    if task_count >= 200:
        break

# Create a DataFrame from the tasks dictionary
underspecified_df = pd.DataFrame(list(tasks_dict.items()), columns=['Original Task', 'Ground_Truth_Details'])

# Save the DataFrame to a new CSV file in Google Drive
output_csv_file = '/content/drive/My Drive/WebArena_Ground_Truth_Details.csv'
underspecified_df.to_csv(output_csv_file, index=False)

print(f"Ground truth details have been saved to {output_csv_file}")

#REGEX CODE

import pandas as pd
import re

# Load the CSV file into a DataFrame
csv_file_path = '/content/drive/MyDrive/WebArena_Ground_Truth_Details.csv'  # Update the path as needed
df = pd.read_csv(csv_file_path)

# Function to remove the word "json" using regex
def remove_json_prefix(details):
    return re.sub(r'\bjson\b', '', details).strip()

# Apply the function to the 'Ground_Truth_Details' column
df['Ground_Truth_Details'] = df['Ground_Truth_Details'].apply(remove_json_prefix)

# Save the cleaned DataFrame to a new CSV file
cleaned_csv_file_path = '/content/drive/MyDrive/1111Ground_Truth_Details_Cleaned.csv'  # Update the path as needed
df.to_csv(cleaned_csv_file_path, index=False)

print(f"The cleaned data has been saved to {cleaned_csv_file_path}")

from google.colab import drive
import openai
import pandas as pd
import os

# OpenAI API key
api_key = ""

# Generate underspecified prompts
def generate_underspecified_prompt(task, details):
    prompt = f"""
    You are an expert at underspecifying a task. Given a task and a dictionary of the important details in the task, change this task so that one important detail of the task is left out. From the dictionary of important details, choose a pivotal detail to completely remove from the original task so that the task could not be completed successfully without it. Make sure that the task still makes sense, that you fill in any necessary gaps in the task, and completely remove the important detail from the task. Follow these examples very closely: original task - 'rent a car in Brooklyn - Central, NY from April 9 to April 15.', underspecified task - 'rent a car in Brooklyn - Central, NY'. Original task - 'Buy a copy of the Gorillaz first studio album., underspecified task - 'Buy a copy of the Gorillaz album'. Here is the original task that needs to be underspecified: '{task}'. Here is the list of important details: '{details}'. Respond with only the underspecified task.
    """
    try:
        openai.api_key = api_key
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1
        )
        underspecified_prompt = response.choices[0].message['content'].strip()
        return underspecified_prompt
    except Exception as e:
        print(f"Error generating underspecified prompt for '{task}': {e}")
        return None

# Assuming the dataset is in a CSV format and already exists in Google Drive
csv_file_path = '/content/drive/MyDrive/1111Ground_Truth_Details_Cleaned.csv'

# Load the existing dataset
df = pd.read_csv(csv_file_path)

# Dictionary to store original and underspecified prompts
tasks_dict = {}
task_count = 0

# Process the dataset
for index, row in df.iterrows():
    task = row['Original Task']
    details = row['Ground_Truth_Details']
    print(f"Processing task: {task}")
    if task not in tasks_dict:
        underspecified_prompt = generate_underspecified_prompt(task, details)
        if underspecified_prompt:
            tasks_dict[task] = [details, underspecified_prompt]
            task_count += 1
            print(f"Added task {task_count}: {task} -> {underspecified_prompt}")
    print(f"Processed Row {index + 1}")
    if task_count >= 200:
        break

# Create DataFrame
underspecified_df = pd.DataFrame.from_dict(tasks_dict, orient='index', columns=['Ground_Truth_Details', 'Underspecified Task'])

# Save to a new CSV file in Google Drive
csv_file = '/content/drive/My Drive/WebArena_200_Undersimplified.csv'
underspecified_df.to_csv(csv_file, index_label='Original Task')

print(f"Underspecified prompts have been saved to {csv_file}")